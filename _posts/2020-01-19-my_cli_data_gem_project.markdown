---
layout: post
title:      "My CLI Data Gem Project"
date:       2020-01-19 14:41:09 -0500
permalink:  my_cli_data_gem_project
---


There's nothing more intimidating than a completely blank VScode screen. How to begin mapping out your code can be a daunting task to start. To initiate this process, I looked at legitimate examples that kept their code abstract and also demonstrated object oriented programming. Luckily, my instructors illustrated this for us via live lecture. After watching numerous times, I had a good foundation to create my gem. But what was it going to be? I I wanted to use an API and stay away from scraping. I didn't want a site with an overwhelming amount of data, therefore I needed it to be specific. This way I could utilize most of my time making sure my code was easy to read. In realizing I needed something applicable as a gem, It hit me - checking my daily horoscope. I found my API and began creating. I referenced my instructors' lecture for setting up my environment and having all of my requirements running properly. I then gained enough confidence to move on connecting my API and that is where the initial problems began to arrise.

I realized I needed to have a key to access my API and upon receiving this key, I found the data it provided me with did not consist of the horoscope predections. This was not only frustrating but discouraging, fearful that I would have to find a new API. Prior to resorting to that, I messaged the service team and asked if there was any way they could add the predictions to my "trial" membership. To my surprise - they said YES! I then realized the URL was provided with a PUSH method, where as all of the RestClient methods I attempted, used GET. This threw my code off, but wasn't something that hindered me moving forward. The API was connected and I had it printing out a horoscope prediction! But, only for one sign I was specifically calling in. How could I have it retrieve a prediction for every possibe sign the user would input? Without hard coding it? This seemed simple, yet it delayed the coding process longer than I had wished. Then I recalled, pseudocode - write out the code you wish you had. This is when I wrote my method, " def sign_for_user_input".  I needed this method to take in the input from the user and return what astrology sign they were asking for numerically. This was achieved by using the ".to_i" method which converted everything to an integer. I thought I was good to go, until my list of signs printed from "0". This was because the signs were listed in an array. I went back and forth with a few approaches and finally fixed it with: {num+1}.  I was good to go - my gem was working, pulling data from the web, and interacting with a user successfully. 

All issues and stress aside, the lessons learned and confidence gained triumphed. Slowly becoming more excited at the thought of tackling more intimidating projects and hope the confidence only continues to expand in my following months at Flatiron. 
